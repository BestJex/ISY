/*
 * This file is generated by jOOQ.
*/
package top.zbeboy.isy.domain.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;

import top.zbeboy.isy.domain.Isy;
import top.zbeboy.isy.domain.Keys;
import top.zbeboy.isy.domain.tables.records.OauthAccessTokenRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthAccessToken extends TableImpl<OauthAccessTokenRecord> {

    private static final long serialVersionUID = -2011484249;

    /**
     * The reference instance of <code>isy.oauth_access_token</code>
     */
    public static final OauthAccessToken OAUTH_ACCESS_TOKEN = new OauthAccessToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthAccessTokenRecord> getRecordType() {
        return OauthAccessTokenRecord.class;
    }

    /**
     * The column <code>isy.oauth_access_token.token_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> TOKEN_ID = createField("token_id", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * The column <code>isy.oauth_access_token.token</code>.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> TOKEN = createField("token", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>isy.oauth_access_token.authentication_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> AUTHENTICATION_ID = createField("authentication_id", org.jooq.impl.SQLDataType.VARCHAR.length(256).nullable(false), this, "");

    /**
     * The column <code>isy.oauth_access_token.user_name</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * The column <code>isy.oauth_access_token.client_id</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * The column <code>isy.oauth_access_token.authentication</code>.
     */
    public final TableField<OauthAccessTokenRecord, byte[]> AUTHENTICATION = createField("authentication", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>isy.oauth_access_token.refresh_token</code>.
     */
    public final TableField<OauthAccessTokenRecord, String> REFRESH_TOKEN = createField("refresh_token", org.jooq.impl.SQLDataType.VARCHAR.length(256), this, "");

    /**
     * Create a <code>isy.oauth_access_token</code> table reference
     */
    public OauthAccessToken() {
        this("oauth_access_token", null);
    }

    /**
     * Create an aliased <code>isy.oauth_access_token</code> table reference
     */
    public OauthAccessToken(String alias) {
        this(alias, OAUTH_ACCESS_TOKEN);
    }

    private OauthAccessToken(String alias, Table<OauthAccessTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthAccessToken(String alias, Table<OauthAccessTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Isy.ISY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthAccessTokenRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthAccessTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthAccessTokenRecord>>asList(Keys.KEY_OAUTH_ACCESS_TOKEN_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthAccessToken as(String alias) {
        return new OauthAccessToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthAccessToken rename(String name) {
        return new OauthAccessToken(name, null);
    }
}
