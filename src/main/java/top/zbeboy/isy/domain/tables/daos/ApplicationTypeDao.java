/**
 * This class is generated by jOOQ
 */
package top.zbeboy.isy.domain.tables.daos;


import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;

import top.zbeboy.isy.domain.tables.ApplicationType;
import top.zbeboy.isy.domain.tables.records.ApplicationTypeRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.4"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ApplicationTypeDao extends DAOImpl<ApplicationTypeRecord, top.zbeboy.isy.domain.tables.pojos.ApplicationType, Integer> {

	/**
	 * Create a new ApplicationTypeDao without any configuration
	 */
	public ApplicationTypeDao() {
		super(ApplicationType.APPLICATION_TYPE, top.zbeboy.isy.domain.tables.pojos.ApplicationType.class);
	}

	/**
	 * Create a new ApplicationTypeDao with an attached configuration
	 */
	public ApplicationTypeDao(Configuration configuration) {
		super(ApplicationType.APPLICATION_TYPE, top.zbeboy.isy.domain.tables.pojos.ApplicationType.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Integer getId(top.zbeboy.isy.domain.tables.pojos.ApplicationType object) {
		return object.getApplicationTypeId();
	}

	/**
	 * Fetch records that have <code>application_type_id IN (values)</code>
	 */
	public List<top.zbeboy.isy.domain.tables.pojos.ApplicationType> fetchByApplicationTypeId(Integer... values) {
		return fetch(ApplicationType.APPLICATION_TYPE.APPLICATION_TYPE_ID, values);
	}

	/**
	 * Fetch a unique record that has <code>application_type_id = value</code>
	 */
	public top.zbeboy.isy.domain.tables.pojos.ApplicationType fetchOneByApplicationTypeId(Integer value) {
		return fetchOne(ApplicationType.APPLICATION_TYPE.APPLICATION_TYPE_ID, value);
	}

	/**
	 * Fetch records that have <code>application_type_name IN (values)</code>
	 */
	public List<top.zbeboy.isy.domain.tables.pojos.ApplicationType> fetchByApplicationTypeName(String... values) {
		return fetch(ApplicationType.APPLICATION_TYPE.APPLICATION_TYPE_NAME, values);
	}
}
